<policies>
  <inbound>
    <!--
     We have two possible cases at this point:
     1. There is no traceparent header in the incoming request. In this case we generate a new traceparent header later.
        A traceparent has a fixed format: 00-{trace_id}-{span_id}-01 where the trace_id is a UUID and the span_id is a 8 bytes string (16 chars)
     2. There is already a traceparent header in the incoming request. In this case we extract the span_id from the traceparent header and store it in a variable.
        This is required because we need to generate a new span_id and must store the old span_id to be set as parent for the new one.
        The parent span_id will be used later to be sent together with the traceparent to the OTel Receiver (via EventHub)
    -->
    <set-variable name="parent_span_id" value="@{ string traceparent = (string)context.Request.Headers.GetValueOrDefault("traceparent", ""); if (traceparent == "") { return null; } else { return traceparent.Split('-')[2]; } }" />
    <set-header name="traceparent" exists-action="override">
      <value>@{
        const string allowedChars = "abcdefghijkmnopqrstuvwxyz0123456789";
        int stringLength=16;
        Random rand = new Random();
        char[] spanIdChars = new char[stringLength];
        for (int i = 0; i < stringLength; i++) {
        spanIdChars[i] = allowedChars[rand.Next(0, allowedChars.Length)];
        }
        // Check if the trace_id already exists
        string traceparent = (string)context.Request.Headers.GetValueOrDefault("traceparent", "");
        string traceId = "";
        if (string.IsNullOrEmpty(traceparent)) {
          traceId = Guid.NewGuid().ToString().Replace("-", "");
        } else {
          traceId = traceparent.Split('-')[1];
        }
        return "00-" + traceId + "-" + new string(spanIdChars, 0, stringLength) +"-01";
        }</value>
    </set-header>
    <base />
  </inbound>
  <backend>
    <base />
  </backend>
  <outbound>
    <authentication-managed-identity resource="https://[eventhub-namespace-name].servicebus.windows.net" output-token-variable-name="eventHubAccessToken" ignore-error="false" />
    <send-one-way-request mode="new" timeout="10">
      <set-url>https://[eventhub-namespace-name].servicebus.windows.net/[eventhub-name]/messages</set-url>
      <set-method>POST</set-method>
      <set-header name="Authorization" exists-action="override">
        <value>@((string)context.Variables["eventHubAccessToken"])</value>
      </set-header>
      <!-- see https://learn.microsoft.com/en-us/azure/api-management/api-management-policy-expressions#ContextVariables -->
      <set-body>@{
        return new JObject(
        new JProperty("api_name",context.Api.Name),
        new JProperty("product_name",context.Product.Name),
        new JProperty("traceparent",context.Request.Headers.GetValueOrDefault("traceparent", "")),
        new JProperty("parent_span_id",(string)context.Variables["parent_span_id"]),
        new JProperty("http_target",context.Request.Url.Path),
        new JProperty("http_method",context.Request.Method),
        new JProperty("http_host",context.Request.Url.Host),
        new JProperty("http_status_code",context.Response.StatusCode),
        new JProperty("http_client_ip",context.Request.IpAddress),
        new JProperty("request_start_time",((DateTimeOffset)context.Timestamp).ToUnixTimeMilliseconds()),
        new JProperty("request_end_time", ((DateTimeOffset)System.DateTime.UtcNow).ToUnixTimeMilliseconds()),
        new JProperty("subscription_name",context.Subscription.Name)
        ).ToString();
        }</set-body>
    </send-one-way-request>
    <base />
  </outbound>
  <on-error>
    <base />
  </on-error>
</policies>
